@using System.Web.Mvc.Html
@using System.Web.Mvc
@using Nwazet.Commerce.Models
@using Laser.Orchard.NwazetIntegration.Models
@using Laser.Orchard.NwazetIntegration.ViewModels
@{
    Style.Require("Select2").AtHead();
    Script.Require("Select2").AtFoot();
    Script.Require("NwazetIntegration.AddressConfiguration").AtFoot();
    string prefix = Model.Prefix;
    AddressEditViewModel address = Model.Address;
    List<AddressRecord> addressList = Model.ListAddress;
    string idListAddress = prefix + "ListAddress";

    // prefix of elements that will be copied to the ones for this
    // address when this ones are hidden away
    string otherPrefix = Model.OtherPrefix;
    // handle the case where the OtherPrefix is null, because this didn't
    // always exist.
    if (string.IsNullOrWhiteSpace(otherPrefix)) {
        otherPrefix = prefix == "shippingAddressVM"
            ? "billingAddressVM"
            : "shippingAddressVM";
    }

    string isBillingAddress = (address.AddressType == AddressRecordType.BillingAddress)
        .ToString()
        .ToLowerInvariant();

    var guid = Guid.NewGuid().ToString();

    var selectCountries = (address.AddressType == AddressRecordType.BillingAddress
        ? address.BillingCountries : address.ShippingCountries) ?? address.Countries;
}
<div style="float:right">
    <fieldset>
        @if (address.AddressType == AddressRecordType.ShippingAddress) {

            <legend>@T("Stored Shipping Address")</legend>
        }
        else {
            <legend>@T("Stored Billing Address")</legend>
        }

        <select id="@Html.Id(idListAddress)" name="@Html.Name(idListAddress)">
            <option value=-1 title="@T("New address")">
                @T("New address")
            </option>
            @foreach (var ad in addressList) {
                <option value=@ad.Id
                        @if (address.AddressRecord.Id == ad.Id) { <text> selected</text>}
                        title="@(string.Join(" ",
                            (new string[] { ad.Honorific, ad.FirstName, ad.LastName, ad.Company})
                                .Where(s => !string.IsNullOrWhiteSpace(s))))">
                    @(string.Join(" ", (new string[] { ad.Address1, ad.Address2, ad.City }).Where(s => !string.IsNullOrWhiteSpace(s))))
                </option>
            }
        </select>
    </fieldset>
</div>
<div id="@guid">
    <label for="@Html.Id(prefix + ".Honorific")">@T("Title")</label>
    <input id="@Html.Id(prefix + ".Honorific")" type="text" name="@Html.Name(prefix + ".Honorific")" value="@address.Honorific" class="honorific input-mini" />
    <div class="hint">@T("Title or honorific, e.g. Mr., Mrs., Dr., San, etc.")</div>
    <label for="@Html.Id(prefix + ".FirstName")">@T("First Name")</label>
    <input id="@Html.Id(prefix + ".FirstName")" type="text" name="@Html.Name(prefix + ".FirstName")" value="@address.FirstName" class="input-large required" />
    <div class="hint">@T("Please include middle name or initial as appropriate.")</div>
    <label for="@Html.Id(prefix + ".LastName")">@T("Last Name")</label>
    <input id="@Html.Id(prefix + ".LastName")" type="text" name="@Html.Name(prefix + ".LastName")" value="@address.LastName" class="input-large required" />
    <div class="hint">@T("Please include middle name or initial as appropriate.")</div>
    <label for="@Html.Id(prefix + ".Company")">@T("Company")</label>
    <input id="@Html.Id(prefix + ".Company")" type="text" name="@Html.Name(prefix + ".Company")" value="@address.Company" class="input-large" />

    <label for="@Html.Id(prefix + ".CountryId")" class="required">@T("Country")</label>
    <select name="@Html.Name(prefix + ".CountryId")"
            class="address-input"
            id="@Html.Id(prefix + ".CountryId")"
            data-requiredpattern="^[1-9][0-9]*$"
            data-requiredvisibleelement="select2-@Html.Id(prefix + ".CountryId")-container">
        @foreach (var item in selectCountries) {
            <option value="@item.Value" @(item.Selected ? "selected=\"selected\"" : "\"\"")>
                @item.Text
            </option>
        }
    </select> <div class="hint">@T("Select your Country from the list.")</div>

    <label for="@Html.Id(prefix + ".City")" class="required">@T("City")</label>
    @Html.Hidden(prefix + ".CityId", address.CityId)
    <select id="@Html.Id(prefix + ".CitySelectedId")"
            class="address-input"
            name="@Html.Name(prefix + ".CitySelectedId")"
            data-requiredfield="@Html.Id(prefix + ".CityId")"
            data-requiredlabelfor="@Html.Id(prefix + ".City")"
            data-requiredpattern="^[1-9][0-9]*$"
            data-requiredvisibleelement="select2-@Html.Id(prefix + ".CitySelectedId")-container">
        @if (address.CityId > 0) {
            <option value="@address.CityId" selected="selected">@address.City</option>
        }
    </select>
    <input type="text" id="@Html.Id(prefix + ".City")"
           placeholder="@T("City")"
           class="required address-input"
           name="@Html.Name(prefix + ".City")"
           value="@address.City" />
    <label for="@Html.Id(prefix + ".Address1")" class="required">@T("Address")</label>
    <input id="@Html.Id(prefix + ".Address1")" type="text" name="@Html.Name(prefix + ".Address1")" value="@address.Address1" class="input-xxlarge required" />
    <input id="@Html.Id(prefix + ".Address2")" type="text" name="@Html.Name(prefix + ".Address2")" value="@address.Address2" class="input-xxlarge" />

    <label for="@Html.Id(prefix + ".Province")" class="required">@T("State, province, prefecture, republic or region")</label>
    @Html.Hidden(prefix + ".ProvinceId", address.ProvinceId)
    <select id="@Html.Id(prefix + ".ProvinceSelectedId")"
            class="address-input"
            name="@Html.Name(prefix + ".ProvinceSelectedId")"
            data-requiredfield="@Html.Id(prefix + ".ProvinceId")"
            data-requiredlabelfor="@Html.Id(prefix + ".Province")"
            data-requiredpattern="^[1-9][0-9]*$"
            data-requiredvisibleelement="select2-@Html.Id(prefix + ".ProvinceSelectedId")-container">
        @if (address.ProvinceId > 0) {
            <option value="@address.ProvinceId" selected="selected">@address.Province</option>
        }
    </select>
    <input id="@Html.Id(prefix + ".Province")"
           placeholder="@T("State, province, prefecture, republic or region")"
           class="required address-input" pattern="^[-a-zA-Z].{1,}"
           title="@T("Province, starting with a letter.")"
           name="@Html.Name(prefix + ".Province")" type="text"
           value="@address.Province" />
    <div class="hint">@T("Please specify the state, province, prefecture, republic or region code as appropriate. For example, 'WA' for the state of Washington in the United States.")</div>
    <label for="@Html.Id(prefix + ".PostalCode")" class="required">@T("Postal or ZIP code")</label>
    <input id="@Html.Id(prefix + ".PostalCode")" type="text" name="@Html.Name(prefix + ".PostalCode")" value="@address.PostalCode" class="input-small required" />
</div>
@using (Script.Foot()) {
    <script type="text/javascript">
    $(document).ready(function () {
        var addressOptions = {
            guid: '@guid',
            arrayOfStoredAddresses: JSON.parse('@Html.Raw(Json.Encode(Model.ListAddress))'),
            elementsPrefix: '@Html.Id(prefix + "_")',
            isBillingAddress: (true @Html.Raw(address.AddressType == AddressRecordType.BillingAddress? " && true":" && false")),

            countries: {
                administrativeInfoUrl: '@Url.Action("GetAdministrativeInfo", "Addresses", new { area = "Laser.Orchard.NwazetIntegration" })',
                selectedId: @address.CountryId,
                select2Options: {
                    placeholder: '@T("Select a country")',
                    width: '100%'
                }
            },
            cities: {
                getUrl: '@Url.Action("citiesapi", "Addresses", new { area = "Laser.Orchard.NwazetIntegration" })',
                selectedId: @address.CityId,
                select2Options: {
                    placeholder: '@T("Select a city")',
                    width: '100%',
                    minimumInputLength: '2'
                }
            },
            provinces: {
                getUrl: '@Url.Action("provincesapi", "Addresses", new { area = "Laser.Orchard.NwazetIntegration" })',
                selectedId: @address.ProvinceId,
                select2Options: {
                    placeholder: '@T("Select a province")',
                    width: '100%',
                    minimumInputLength: '1'
                }
            }
        };
        buildAddressUI(addressOptions);
    });
    </script>
}