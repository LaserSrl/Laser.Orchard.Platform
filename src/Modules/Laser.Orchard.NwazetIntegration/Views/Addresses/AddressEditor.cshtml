@using Laser.Orchard.NwazetIntegration.ViewModels;
@using Orchard.Localization;
@using System.Linq.Expressions;
@using Laser.Orchard.NwazetIntegration.Models;

@model AddressEditViewModel

@{
    Style.Require("Select2").AtHead();
    Script.Require("Select2").AtFoot();
    Script.Require("NwazetIntegration.AddressConfiguration").AtFoot();

    var shippingCountries = Model.ShippingCountries
        .Select(sli => new { val = sli.Value, text = sli.Text });
    var billingCountries = Model.BillingCountries
        .Select(sli => new { val = sli.Value, text = sli.Text });

    var guid = Guid.NewGuid().ToString();
}

@helper EditorForString(
    Expression<Func<AddressEditViewModel, string>> property,
    LocalizedString label,
    LocalizedString hint = null,
    bool required = false) {
    <div class="address-input address-text-input">
        @Html.LabelFor(property, label.Text, new { @class = required ? "" : "required" })
        @Html.EditorFor(property)
        @if (hint != null) {
            <div class="hint">@hint</div>
        }
    </div>
}
@*This should generally be put in a form*@
<div class="address-editor" id="@guid">
    <div class="address-input">
        @Html.HiddenFor(m => m.AddressType)
        <h4>@(Model.AddressType == AddressRecordType.ShippingAddress ? T("Shipping Address") : T("Billing Address"))</h4>
    </div>
    @* Personal information *@
    @EditorForString(m => m.Honorific,
        T("Title"),
        T("Title or honorific, e.g. Mr., Mrs., Dr., San, etc."))
    @EditorForString(m => m.FirstName,
        T("First Name"),
        T("Please include middle name or initial as appropriate."),
        true)
    @EditorForString(m => m.LastName,
        T("Last Name"),
        T("Please include middle name or initial as appropriate."),
        true)
    @EditorForString(m => m.Company,
        T("Company"))
    @* 1. Country *@
    @*    This must be selected among the countries configured *@
    <div class="address-input address-text-input address-country">
        @Html.LabelFor(m => m.CountryId, T("Country").Text, new { @class = "required address-input" })
        @Html.DropDownListFor(m => m.CountryId,
            Model.AddressType == AddressRecordType.ShippingAddress
                ? Model.ShippingCountries
                : Model.BillingCountries)

        <div class="hint">@T("Select a valid country from the list.")</div>
    </div>
    @* 2. City *@
    <div class="address-input address-text-input address-city">
        @Html.LabelFor(m => m.City, T("City").Text, new { @class = "required" })
        @Html.HiddenFor(m => m.CityId)
        <select id="CitySelectedId"
                class="address-input"
                name="CitySelectedId"
                data-requiredfield="@Html.FieldIdFor(m=>m.CityId)">
            @if (Model.CityId > 0) {
                <option value="@Model.CityId" selected="selected">@Model.City</option>
            }
        </select>
        <input type="text" id="@Html.FieldIdFor(m => m.City)"
               placeholder="@T("City")"
               class="required address-input"
               name="@Html.NameFor(m => m.City)"
               value="@Model.City" />
        <div class="hint">@T("Select a city from the list.")</div>
    </div>
    @* 3. Province and ZIP code *@
    <div class="address-input address-text-input address-province">
        @Html.LabelFor(m => m.Province, T("State, province, prefecture, republic or region").Text, new { @class = "required" })
        @Html.HiddenFor(m => m.ProvinceId)
        <select id="ProvinceSelectedId"
                class="address-input"
                name="ProvinceSelectedId"
                data-requiredfield="@Html.FieldIdFor(m=>m.Province)">
            @if (Model.ProvinceId > 0) {
                <option value="@Model.ProvinceId" selected="selected">@Model.Province</option>
            }
        </select>
        <input id="@Html.FieldIdFor(m => m.Province)"
               placeholder="@T("State, province, prefecture, republic or region")"
               class="required address-input" pattern="^[-a-zA-Z].{1,}"
               title="@T("Province, starting with a letter.")"
               name="@Html.NameFor(m => m.Province)" type="text"
               value="@Model.Province" />
        <div class="hint">@T("Please specify the state, province, prefecture, republic or region code as appropriate. For example, 'WA' for the state of Washington in the United States.")</div>
    </div>
    @EditorForString(m => m.PostalCode,
        T("Postal or ZIP code"))
    @* 4. Street *@
    <div class="address-input address-text-input">
        @Html.LabelFor(m => m.Address1, T("Address").Text, new { @class = "required" })
        @Html.EditorFor(m => m.Address1)
        @Html.EditorFor(m => m.Address2)
    </div>
</div>
@using (Script.Foot()) {
    <script type="text/javascript">
    $(document).ready(function () {
        var addressOptions = {
            guid: '@guid',
            elementsPrefix: '',
            isBillingAddress: (true @Html.Raw(Model.AddressType == AddressRecordType.BillingAddress? " && true":" && false")),

            countries: {
                administrativeInfoUrl: '@Url.Action("GetAdministrativeInfo", "Addresses", new { area = "Laser.Orchard.NwazetIntegration" })',
                selectedId: @Model.CountryId,
                select2Options: {
                    placeholder: '@T("Select a country")',
                    width: '100%'
                }
            },
            cities: {
                getUrl: '@Url.Action("citiesapi", "Addresses", new { area = "Laser.Orchard.NwazetIntegration" })',
                selectedId: @Model.CityId,
                select2Options: {
                    placeholder: '@T("Select a city")',
                    width: '100%',
                    minimumInputLength: '2'
                }
            },
            provinces: {
                getUrl: '@Url.Action("provincesapi", "Addresses", new { area = "Laser.Orchard.NwazetIntegration" })',
                selectedId: @Model.ProvinceId,
                select2Options: {
                    placeholder: '@T("Select a province")',
                    width: '100%',
                    minimumInputLength: '1'
                }
            }
        };
        buildAddressUI(addressOptions);
    });
    </script>
}
