@using Contrib.Widgets.Models;
@using Orchard;
@using Orchard.ContentManagement;
@using Orchard.Core.Contents;
@using Orchard.Environment.Extensions.Models;
@using Orchard.Localization.Models;
@using Orchard.Security;
@using Orchard.Utility.Extensions;
@using Orchard.Core.Common.Models;
@using System.Web.Mvc;
@using System.Web.Routing;
@using Orchard.Mvc.Html;

@{
    Style.Require("TheAdminWidgetContainerStyle");
    Script.Require("jQueryUI_Core");
    Script.Require("AdminWidgetContainer");

    Script.Include("~/Themes/TheAdmin/scripts/admin.js");

    IOrchardServices _orchardServices;
    WorkContext.TryResolve<IOrchardServices>(out _orchardServices);

    var zones = Model.Zones;
    var theme = (ExtensionDescriptor)Model.CurrentTheme;
    var zonePreviewImage = (string)Model.ZonePreviewImage;
    var allWidgets = (IEnumerable<WidgetExPart>)Model.Widgets;
    var contentItem = Model.ContentItem;
    var localizedContent = Model.ContentLocalizations != null ? (IEnumerable<LocalizationPart>)Model.ContentLocalizations : new List<LocalizationPart>();
    var selectListForLocalizedContent = new SelectList(localizedContent, "Id", "Culture.Culture", 0);

    ContentItemMetadata metadata = _orchardServices.ContentManager.GetItemMetadata(Model.ContentItem);
    RouteValueDictionary createRouteValues = metadata.CreateRouteValues;

    var inCreateRoute = Url.RouteUrl(ViewContext.RouteData.Values) == Url.RouteUrl(createRouteValues);

}

<fieldset id="widgetsPlacement">
    <input type="hidden" name="returnUrl" />
    <input type="hidden" id="hiddenSubmitSave" />
    <input type="hidden" name="widgetPlacement" />
    <input type="hidden" name="removedWidgets" />
    @if (contentItem.Id != 0 && localizedContent.Count() > 0) {
        @T("Add Widgets from localized page ") <select name="cloneFrom">
            <option value="0">@T("-- Choose a culture to copy widgets from its version --")</option>
            @foreach (var item in localizedContent) {
                <option value="@item.ContentItem.Id">@item.Culture.Culture</option>
            }
        </select>
    }

    <legend>@T("Widgets")</legend>

    @* Used for the filter *@
    <input type="hidden" id="ContribWidget.ClickedZone" name="ContribWidget.ClickedZone" />
    <input type="hidden" id="ContribWidget.HostIdSaved" name="ContribWidget.HostIdSaved" value="@contentItem.Id" />

    <div class="expando">
        <div class="widgets group">
            <div class="layout-widgets-placement">
                <div class="zones-container">
                    <div class="zones">
                        <ol>
                            @foreach (var zone in zones) {
                                var widgets = allWidgets.Where(x => x.Zone == zone).OrderBy(w => w.Position, new Orchard.UI.FlatPositionComparer());
                                var contentCreated = (contentItem.Id != 0 && !inCreateRoute);
                                var addWidgetUrl = contentCreated
                                                       ? Url.Action("ListWidgets", "Admin", new { area = "Contrib.Widgets", hostId = contentItem.Id, zone })
                                                       : Url.Action("CreateContent", "Admin", new { area = "Contrib.Widgets", id = contentItem.ContentType, zone });
                                var contentId = contentCreated ? contentItem.Id : 0;

                                <li>
                                    <h2>@zone</h2>
                                    <div class="zone-actions">
                                        @if (contentItem.Id == 0) {
                                            <button class="button grey add-widget"
                                                    type="submit"
                                                    name="submit.Zone"
                                                    onclick="document.getElementById('ContribWidget.ClickedZone').value = '@zone'">
                                                @T("Add")
                                            </button>
                                        }
                                        else {
                                            <a class="button grey add-widget" href="@addWidgetUrl" data-host-id="@contentId"
                                                onclick="document.getElementById('ContribWidget.ClickedZone').value = '@zone'">@T("Add")</a>
                                        }
                                    </div>
                                    <ul class="widgets" data-zone="@zone" id="@zone">
                                        @foreach (var widget in widgets) {
                                            <li data-widget-id="@widget.Id">
                                                @{
                                                    int numberPLPart = widget.ContentItem.Parts.Where(x => x.PartDefinition.Name == "PublishLaterPart").Count();
                                                    bool scheduledTime = false;
                                                    String scheduledTitle = "";
                                                    if (numberPLPart > 0) {
                                                        dynamic publishLaterPart = widget.ContentItem.Parts.Where(x => x.PartDefinition.Name == "PublishLaterPart").First();

                                                        if (publishLaterPart.ScheduledPublishUtc.Value != null && publishLaterPart.ScheduledPublishUtc.Value > DateTime.UtcNow) {
                                                            scheduledTime = true;
                                                            scheduledTitle += " " + @T("Scheduled Publish") + ": " + @Display.DateTime(DateTimeUtc: publishLaterPart.ScheduledPublishUtc.Value, CustomFormat: null).ToString();
                                                        }
                                                    }

                                                    int numberALPart = widget.ContentItem.Parts.Where(x => x.PartDefinition.Name == "ArchiveLaterPart").Count();
                                                    if (numberALPart > 0) {
                                                        dynamic archiveLaterPart = widget.ContentItem.Parts.Where(x => x.PartDefinition.Name == "ArchiveLaterPart").First();

                                                        if (archiveLaterPart.ScheduledArchiveUtc.Value != null && archiveLaterPart.ScheduledArchiveUtc.Value > DateTime.UtcNow) {
                                                            if (scheduledTime) {
                                                                scheduledTitle += "; ";
                                                            }
                                                            scheduledTime = true;
                                                            scheduledTitle += " " + @T("Scheduled Archive") + ": " + @Display.DateTime(DateTimeUtc: archiveLaterPart.ScheduledArchiveUtc.Value, CustomFormat: null).ToString();
                                                        }
                                                    }

                                                    int numberLocPart = widget.ContentItem.Parts.Where(x => x.PartDefinition.Name == "LocalizationPart").Count();
                                                    String culture = "";
                                                    if (numberLocPart > 0) {
                                                        dynamic localizationPart = widget.ContentItem.Parts.Where(x => x.PartDefinition.Name == "LocalizationPart").First();
                                                        if (localizationPart.Culture != null) {
                                                            culture = "(" + localizationPart.Culture.Culture + ")";
                                                        }
                                                    }
                                                }
                                                <h3>
                                                    <a href="@Url.Action("EditWidget", "Admin", new { area = "Contrib.Widgets", hostId = contentItem.Id, id = widget.Id, returnUrl = ViewContext.RequestContext.HttpContext.Request.Url.PathAndQuery })">@Html.ItemDisplayText(widget) @culture</a>
                                                </h3><span>
                                                    <div class="contentType">
                                                        - @widget.TypeDefinition.DisplayName
                                                        @if (scheduledTime) {
                                                            <img class="icon scheduledDates" src="@Href("~/Modules/Orchard.PublishLater/Content/Admin/images/scheduled.gif")" data-html="true" rel="tooltip" alt="@T("Scheduled")" title="@scheduledTitle" style="white-space: pre-wrap;" />
                                                        }
                                                    </div>
                                                    <div class="widget-actions">
                                                        @if (widget.IsPublished) {
                                                            if (widget.HasDraft) {
                                                                if (Authorizer.Authorize(Permissions.PublishContent, widget)) {
                                                                    @Html.Link(T("Publish Draft").Text, Url.Action("Publish", "Admin", new { area = "Contents", id = widget.ContentItem.Id, returnUrl = Request.RawUrl }), new { itemprop = "UnsafeUrl" })
                                                                    @T(" | ")
                                                                }
                                                            }

                                                            if (Authorizer.Authorize(Permissions.PublishContent, widget)) {
                                                                @Html.Link(T("Unpublish").Text, Url.Action("Unpublish", "Admin", new { area = "Contents", id = widget.ContentItem.Id, returnUrl = Request.RawUrl }), new { itemprop = "UnsafeUrl" })
                                                                @T(" | ")
                                                            }
                                                        }
                                                        else {
                                                            if (Authorizer.Authorize(Permissions.PublishContent, widget)) {
                                                                @Html.Link(T("Publish").Text, Url.Action("Publish", "Admin", new { area = "Contents", id = widget.ContentItem.Id, returnUrl = Request.RawUrl }), new { itemprop = "UnsafeUrl" })
                                                                @T(" | ")
                                                            }
                                                        }
                                                        <a href="#" class="remove-widget" data-confirm="@T("Are you sure you want to delete this widget? Note: the widget will be removed permanently when you save the content item.")">@T("Remove")</a>
                                                    </div>
                                            </li>
                                        }
                                    </ul>
                                </li>
                            }
                        </ol>
                    </div>
                </div>
            </div>
            <div class="layout-widgets-assistance">
                @if (!string.IsNullOrEmpty(zonePreviewImage)) {
                    <div class="theme-preview">
                        <img title="@T("{0} zone preview", theme.Name)" src="@Url.Content(zonePreviewImage)" alt="@T("{0} zone preview", theme.Name)">
                    </div>
                }
            </div>
        </div>
    </div>
</fieldset>