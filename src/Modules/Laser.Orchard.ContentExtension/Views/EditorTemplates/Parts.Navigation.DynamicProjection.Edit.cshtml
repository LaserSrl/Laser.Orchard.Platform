@using System.Linq;
@using Laser.Orchard.ContentExtension.ViewModels;

@model DynamicProjectionVM
@{
    Script.Require("ShapesBase");
}
@*ADMINMENU START*@
<fieldset>
    @Html.EditorFor(m => m.Part.OnAdminMenu)
    <label for="@Html.FieldIdFor(m => m.Part.OnAdminMenu)" class="forcheckbox">@T("Show on admin menu")</label>
    <div data-controllerid="@Html.FieldIdFor(m => m.Part.OnAdminMenu)" class="">
        <label for="@Html.FieldIdFor(m => m.Part.AdminMenuText)">@T("Menu text")</label>
        @Html.TextBoxFor(m => m.Part.AdminMenuText, new { @class = "text medium" })
        <span class="hint">@T("The text of the admin menu item.")</span>

        <label for="@Html.FieldIdFor(m => m.Part.AdminMenuPosition)">@T("Position")</label>
        @Html.TextBoxFor(m => m.Part.AdminMenuPosition, new { @class = "text small" })
        <span class="hint">@T("The position of item in the admin menu.")</span>
        <label for="@Html.FieldIdFor(m => m.Part.Icon)">@T("Icon")</label>
        @Html.TextBoxFor(m => m.Part.Icon, new { @class = "text medium" })
        <span class="hint">@T("The css class used as icon for the admin menu item.")</span>
    </div>
</fieldset>
@*ADMINMENU END*@

@*FILTERS FORM START*@
<fieldset>
    <h2>@T("Custom razor for filtering")</h2>
    @if (Model.ListFormFile != null && Model.ListFormFile.Any()) {
        @Html.LabelFor(m => m.Part.Shape, T("Razor file"))
        @Html.DropDownListFor(m => m.Part.Shape, Model.ListFormFile, "")
        <span class="hint">@T("Choose a form to be used as filtering form.")</span>
    }
    else {
        @T("There are not forms set. Create the first by adding a cshtml file in the /App_Data/Sites/{tenant}/CodeViews folder")
    }
</fieldset>
<fieldset>
    <h2>@T("ContentType for filtering")</h2>
    @Html.LabelFor(m => m.Part.TypeForFilterForm, T("Content type"))
    @Html.TextBoxFor(m => m.Part.TypeForFilterForm, new { @class = "text medium" })
    <span class="hint">@T("Type a ContentType name. Leave empty to not use a ContenType as form for filtering.")</span>
</fieldset>
@*FILTERS FORM END*@

@*QUERY START*@
<fieldset>
    <h2>@T("Query")</h2>
    <div>
        @Html.CheckBoxFor(m => m.Part.ReturnsHqlResults, T("Returns an Hql result"))
        @Html.LabelFor(m => m.Part.ReturnsHqlResults, new { @class = "forcheckbox" })
        @Html.Hint(T("Check if the query returns an HqlResult and NOT a list of content items.")) @*TODO: jquery to hide/show #content-query-group and #querypicker*@
    </div>

    @{
        var selectedQueryRecordId = -1;
    }

    <fieldset id="content-query-group">
        <div>

            @Html.LabelFor(m => m.Projection.QueryLayoutRecordId, T("For Query"))
            <select id="@Html.FieldIdFor(m => m.Projection.QueryLayoutRecordId)" name="@Html.FieldNameFor(m => m.Projection.QueryLayoutRecordId)">
                @foreach (QueryRecordEntry queryRecord in Model.Projection.QueryRecordEntries.OrderBy(x => x.Name)) {
                    <optgroup label="@queryRecord.Name">
                        @Html.SelectOption(Model.Projection.QueryLayoutRecordId, queryRecord.Id + ";-1", queryRecord.Name + " " + T("(Default Layout)").Text)
                        @if (Model.Projection.QueryLayoutRecordId == queryRecord.Id + ";-1") {
                            selectedQueryRecordId = queryRecord.Id;
                        }

                        @foreach (LayoutRecordEntry layoutRecord in queryRecord.LayoutRecordEntries.OrderBy(x => x.Description)) {
                            if (Model.Projection.QueryLayoutRecordId == queryRecord.Id + ";" + layoutRecord.Id) {
                                selectedQueryRecordId = queryRecord.Id;
                            }
                        }
                    </optgroup>
                }
            </select>
            @if (selectedQueryRecordId != -1) {
                @Html.ActionLink(T("Edit Query").Text, "Edit", new { area = "Orchard.Projections", id = selectedQueryRecordId }, new { })
            }
            <span class="hint">@T("The query to display.")</span>
        </div>
    </fieldset>

    <fieldset>
        <div>
            @Html.LabelFor(m => m.Projection.Items, T("Items to display"))
            @Html.TextBoxFor(m => m.Projection.Items, new { @class = "text small" })
            <span class="hint">@T("The number of items to display. Enter 0 for no limit. When using pagination, this is the number of items per page.")</span>
        </div>

        <div>
            @Html.LabelFor(m => m.Projection.Skip, T("Offset"))
            @Html.TextBoxFor(m => m.Projection.Skip, new { @class = "text small" })
            <span class="hint">@T("The number of items to skip (e.g., if 2 is entered, the first 2 items won't be diplayed).")</span>
        </div>

        <div>
            @Html.LabelFor(m => m.Projection.MaxItems, T("Maximum items"))
            @Html.TextBoxFor(m => m.Projection.MaxItems, new { @class = "text small" })
            <span class="hint">@T("Maximum number of items which can be queried at once. Use 0 for unlimited. This is only used as a failsafe when the number of items comes from a user-provided source such as the query string.")</span>
        </div>

        <div>
            @Html.LabelFor(m => m.Projection.PagerSuffix, T("Suffix"))
            @Html.TextBoxFor(m => m.Projection.PagerSuffix, new { @class = "text" })
            <span class="hint">@T("Optional. Provide a suffix to use when multiple pagers are displayed on the same page, e.g., when using multiple Projection Widgets, or to define alternates.")</span>
        </div>

        <div>
            @Html.CheckBoxFor(m => m.Projection.DisplayPager)
            <label class="forcheckbox" for="@Html.FieldIdFor(m => m.Projection.DisplayPager)">@T("Show pager")</label>
            <span class="hint">@T("Check to add a pager to the list.")</span>
        </div>
    </fieldset>

    @using (Script.Foot()) {
        <script type="text/javascript">
            //<![CDATA[
            (function ($) {
                $("fieldset legend").expandoControl(function (controller) { return controller.nextAll(".expando"); }, { collapse: true, remember: false });
            })(jQuery);
//]]>
        </script>
    }


</fieldset>
@*QUERY END*@
@*RESULTS FORM START*@
<fieldset>
    <h2>@T("Custom razor for results")</h2>
    @if (Model.ListFormFile != null && Model.ListFormFile.Any()) {
        @Html.LabelFor(m => m.Part.ShapeForResults, T("Razor file"))
        @Html.DropDownListFor(m => m.Part.ShapeForResults, Model.ListFormFile, "")
        <span class="hint">@T("Choose a form to be used to render results.")</span>
    }
    else {
        @T("There are not razors set. Create the first by adding a cshtml file in the /App_Data/Sites/{tenant}/CodeViews folder")
    }
</fieldset>
@*RESULTS FORM END*@