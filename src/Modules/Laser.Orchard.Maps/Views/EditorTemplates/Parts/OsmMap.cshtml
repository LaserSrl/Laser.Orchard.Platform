@using Orchard.UI.Resources;
@using Orchard.MediaLibrary.Fields;
@using Laser.Orchard.Maps.Models;
@model Laser.Orchard.Maps.ViewModels.MapEditModel
@{
    MapPartSettings partSettings = Model.Map.Settings.GetModel<MapPartSettings>();
    string tilesType = Model.MapTiles;
    string usedTiles = "";
    int maxZoom = 22;
    bool httpTiles = false;
    if (!String.IsNullOrWhiteSpace(tilesType)) {
        if (!tilesType.ToLower().Trim().StartsWith("http")) {
            usedTiles = tilesType;
        } else {
            usedTiles = tilesType;
            httpTiles = true;
            maxZoom = Model.MaxZoom > 0 ? Model.MaxZoom : maxZoom = 22;
        }
    }

    var lon = string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}", Model.Map.Longitude);
    var lat = string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}", Model.Map.Latitude);
    var mapSourceFile = (MediaLibraryPickerField)Model.Map.Fields.SingleOrDefault(w => w.Name == "MapSourceFile");
    var mediaUrl = "";
    try {
        if (mapSourceFile != null && mapSourceFile.Ids.Length > 0 && mapSourceFile.MediaParts != null && mapSourceFile.MediaParts.Count() > 0) {
            mediaUrl = ((Orchard.MediaLibrary.Models.MediaPart)mapSourceFile.MediaParts.FirstOrDefault()).MediaUrl;
        }
    } catch { }

}
@using (Script.Head()) {
    Script.Require("OpenLayersAPI");
    Script.Require("OpenStreetMapAPI");
    Script.Require("LaserOrchardMaps");
    Script.Require("jQuery");
    Script.Require("jQueryUI_Core");
    Script.Require("jQueryUI_Autocomplete");
    Style.Require("jQuery_Autocomplete");
    
    <style type="text/css">
        .ui-autocomplete.ui-front {
            z-index: 9999;
        }
    </style>
}
@using (Script.Foot()) {
    <script type="text/javascript">
                @if (partSettings.HideMapSource) {
                    <text>$("input[name='MapPart.MapSourceFile.SelectedIds']").parent().hide();</text>
                }

        function showcoords(){
            var latField = document.getElementById("@Html.FieldIdFor(model => model.Map.Latitude)");
            var lonField = document.getElementById("@Html.FieldIdFor(model => model.Map.Longitude)");
            if (latField.attributes["type"].value=="hidden"){
                latField.attributes["type"].value="text";
                lonField.attributes["type"].value="text";
            } else {
                latField.attributes["type"].value="hidden";
                lonField.attributes["type"].value="hidden";
            }
            return false;
        }
        function initialize() {
            var map = initializeMap(@lon, @lat, "@Model.Map.LocationInfo", "@Model.Map.LocationAddress", undefined);

           $("#@Html.FieldIdFor(model => model.Map.LocationInfo)").autocomplete({
                minLenght: 3,
                source: function (request, response) {
                    $.ajax({
                        url: "https://nominatim.openstreetmap.org/search.php",
                        dataType: "json",
                        data: {
                            format: "jsonv2",
                            q: $("#@Html.FieldIdFor(model => model.Map.LocationInfo)").val()
                        },
                        success: function (data) {
                            var x = data;
                            response($.map(data, function (item) {
                                return {
                                    label: item.display_name,
                                    value: item.name,
                                    place_id: item.place_id,
                                    //name: item.name,
                                    lat: item.lat,
                                    lon: item.lon
                                };
                            }));
                        }
                    });
                }
            });

            $("#@Html.FieldIdFor(model => model.Map.LocationInfo)").on("autocompleteselect", function (event, ui) {
                //var x = ui.item;
                //$("#@Html.FieldIdFor(model => model.Map.LocationInfo)").val(ui.item.name);
                $("#@Html.FieldIdFor(model => model.Map.LocationAddress)").val(ui.item.label);
                $("#@Html.FieldIdFor(model => model.Map.Latitude)").val(ui.item.lat.replace(".", ","));
                $("#@Html.FieldIdFor(model => model.Map.Longitude)").val(ui.item.lon.replace(".", ","));
                //return false;

                map = initializeMap(ui.item.lon, ui.item.lat, ui.item.value, ui.item.label, map);
            });
        }

        if (window.addEventListener) // W3C standard
        {
            window.addEventListener('load', initialize, false); // NB **not** 'onload'
        }
        else if (window.attachEvent) // Microsoft
        {
            window.attachEvent('onload', initialize);
        }

        function initializeMap(lon, lat, locationInfo, locationAddress, map) {
            if (map) {
                map.destroy();
            }
            map = new OpenLayers.Map("maparea");
            @if (!httpTiles) {
                if (String.IsNullOrWhiteSpace(tilesType)) {
                <text>
            map.addLayer(new OpenLayers.Layer.OSM());
            </text>
                } else {
                <text>
            map.addLayer(new OpenLayers.Layer.OSM.@Html.Raw(tilesType+"(\"OSM\")"));
            </text>
                }
            } else {

                <text>
            var usedTilesJS = "@usedTiles";
            var layer_options = {
                tileOptions: {
                    crossOriginKeyword: null
                },
                sphericalMercator: true,
                // buffer: 0,
                transitionEffect: "resize",
                numZoomLevels: @maxZoom
                };
            map.addLayer(new OpenLayers.Layer.OSM('OSM',usedTilesJS,layer_options));
            </text>
            }
            var kmllayer = new OpenLayers.Layer.Vector("KML", {
                strategies: [new OpenLayers.Strategy.Fixed()],
                protocol: new OpenLayers.Protocol.HTTP({
                    url: "@WorkContext.CurrentSite.BaseUrl@(mediaUrl)",
                    format: new OpenLayers.Format.KML({
                        extractStyles: true,
                        extractAttributes: true,
                        maxDepth: 2
                    })
                })
            });

            map.addLayer(kmllayer);

            //Set start centrepoint and zoom
            //TODO: Is it possible to just zoom to extents of KML objects instead?

            var lonLat = new OpenLayers.LonLat( lon, lat )
                        .transform(
                        new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
                        map.getProjectionObject() // to Spherical Mercator Projection
                        );
            var zoom=14;
            map.setCenter (lonLat, zoom);

            // Marker
            var markers = new OpenLayers.Layer.Markers( "Markers" );
            map.addLayer(markers);

            var marker = new OpenLayers.Marker(lonLat);
            markers.addMarker(marker);

            // A popup with some information about our location
            var popup = new OpenLayers.Popup.FramedCloud("Popup", lonLat, null,
                "<h3>" + locationInfo + "</h3><span>" + locationAddress + "</span>",
                    null,true // <-- true if we want a close (X) button, false otherwise
            );
            popup.autoSize = false;
            map.addPopup(popup);

            //Add a selector control to the kmllayer with popup functions
            var controls = {
                selector: new OpenLayers.Control.SelectFeature(kmllayer, { onSelect: createPopup, onUnselect: destroyPopup })
            };

            map.addControl(controls['selector']);
            controls['selector'].activate();

            function createPopup(feature) {
                feature.popup = new OpenLayers.Popup.FramedCloud("pop",
                    feature.geometry.getBounds().getCenterLonLat(),
                    null,
                    '<div class="markerContent">' + feature.attributes.description + '</div>',
                    null,
                    true,
                    function () { controls['selector'].unselectAll(); }
                );
                //feature.popup.closeOnMove = true;
                map.addPopup(feature.popup);
            }

            function destroyPopup(feature) {
                feature.popup.destroy();
                feature.popup = null;
            }

            return map;
        }

    </script>
}
<fieldset>
    <!-- OsmMap -->
    <legend>@T("Map Fields")</legend>
    <div class="location-infos">
        <span class="location-info">
            <label class="sub">@T("Location Info"): </label>@Html.TextBoxFor(model => model.Map.LocationInfo, new { @class = "text-medium" })
        </span>
        <br />
        <span class="location-address">
            <label class="sub">@T("Location Address"): </label>@Html.TextBoxFor(model => model.Map.LocationAddress, new { @class = "text-medium" })
        </span>
        @if (!String.IsNullOrWhiteSpace(partSettings.HintText)) {
            <span class="hint">@partSettings.HintText</span>
        }
        <span class="location-coords">
            <label class="sub">@T("Latitude"): </label>@Html.TextBoxFor(model => model.Map.Latitude, new { placeHolder = T("Latitude"), @class = "text" })
            <label class="sub">@T("Longitude"): </label>@Html.TextBoxFor(model => model.Map.Longitude, new { placeHolder = T("Longitude"), @class = "text" })
        </span>
    </div>
    <div id="maparea" style="width: 700px; height: 450px; margin-top: 20px !important;">
    </div>
</fieldset>
