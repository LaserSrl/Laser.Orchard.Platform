@using Orchard.UI.Resources;
@using Orchard.MediaLibrary.Fields;
@using Orchard.ContentManagement;
@*
    Use this Shape as a "Projection Shape" to render each Content that has a MapPart on a google map!!
*@
@{
    Script.Require("GoogleMapsAPI").AtHead();
    Style.Require("GoogleMaps").AtHead();
    var ID = Model.ContentItem.Id;
    var locationsList = new List<string>();
    IEnumerable<ContentItem> contents = Model.ContentItems;
    foreach (var content in contents) {
        var mapPart = ((dynamic)content).MapPart;
        if (mapPart != null) {
            var mapSourceFile = (MediaLibraryPickerField)((Laser.Orchard.Maps.Models.MapPart)mapPart).Fields.SingleOrDefault(w => w.Name == "MapSourceFile");
            var mediaUrl = "";
            if (mapSourceFile != null && mapSourceFile.Ids.Length > 0 && mapSourceFile.MediaParts != null && mapSourceFile.MediaParts.Count() > 0) {
                mediaUrl = ((Orchard.MediaLibrary.Models.MediaPart)mapSourceFile.MediaParts.FirstOrDefault()).MediaUrl;
            }

            locationsList.Add("['" + (mapPart.LocationInfo ?? "").Replace("'", "\\'") + "','" +
                (mapPart.LocationAddress ?? "").Replace("'", "\\'") + "', " +
                mapPart.Latitude.ToString().Replace(",", ".") + ", " +
                mapPart.Longitude.ToString().Replace(",", ".") + ", '" + 
                Html.ItemDisplayLink(T("more").ToString(), (ContentItem)content).ToHtmlString() + "', '"+
                (String.IsNullOrWhiteSpace(mediaUrl)?"":WorkContext.CurrentSite.BaseUrl + mediaUrl) +
                "']");
        }
    }

    if (contents.Any()) {
        using (Script.Foot()) {
    <script type="text/javascript">
        function @("initialize" + ID + "()") {
            var bounds = new google.maps.LatLngBounds();
            var mapOptions = {
                scaleControl: true,
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            var locations = [
                @Html.Raw(String.Join(",", locationsList))
            ];
            var map = new google.maps.Map(document.getElementById('map_canvas-@ID'), mapOptions);

            var infowindow = new google.maps.InfoWindow();

            var marker, i;

            for (i = 0; i < locations.length; i++) {  
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][2], locations[i][3]),
                    map: map
                });
                bounds.extend(marker.position);
                if (locations[i][5]!=""){
                    var ctaLayer = new google.maps.KmlLayer({
                        url: locations[i][5]
                    });
                    ctaLayer.setMap(map);
                }

                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                        infowindow.setContent(
                            '<div style="overflow:hidden;white-space:nowrap;"><span class="map-locationinfo-marker">'+(locations[i][0])+'</span><span class="map-locationaddress-marker">'+locations[i][1]+'</span><span class="map-detaillink-marker">'+locations[i][4]+'</span></div>'
                            );
                        infowindow.open(map, marker);
                    }
                })(marker, i));
            }
            map.fitBounds(bounds);
        }
        //google.maps.event.addDomListener(window, 'load', @("initialize" + ID) );
    </script>
        }
    <fieldset class="map">
        @* data-map-provider and data-map-id attributes are needed to properly initialize the map via the Google Maps Api callback 
            that looks for the "initializeSuffix" function (data-map-id value is the Suffix for the function name). *@
        <div class="map-canvas" data-map-provider="google" data-map-id="@ID" id="map_canvas-@ID">
        </div>
    </fieldset>
    }
}
