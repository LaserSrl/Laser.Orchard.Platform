@using Laser.Orchard.Questionnaires.Models
@using Laser.Orchard.Questionnaires.ViewModels
@using Orchard.ContentManagement
@using System.Linq

@model QuestionnaireStatsViewModel
@{
    var dateContext = new DateContext {
        Format = "dd/MM/yyyy"
    };
    Style.Require("Bootstrap").AtHead();
    Style.Include("~/themes/theadmin/styles/site.css").AtHead(); // needs to be rendered after bootstrap
    Style.Require("FontAwesome").AtHead();
    Style.Require("DateTimeEditor").AtHead();
    Style.Require("jQueryCalendars_Picker").AtHead();
    Style.Require("jqPlot").AtHead();
    Style.Require("QuestionnaireAdmin").AtHead();


    Script.Require("jQueryCalendars_Picker").AtFoot();
    Script.Require("Bootstrap").AtHead();
    Script.Require("jqPlotPieChart").AtHead();
    Script.Require("jqPlotEnhancedPieLegendRenderer").AtHead();

    const int answersToShow = 3;
    Layout.Title = T("Questionnaire Answers");


    var urlBack = Url.Action("Detail", new { idQuestionario = Request.QueryString["idQuestionario"] });

    var width = 0;
    var height = 0;
    var maxAnswers = Model.QuestionsStatsList.OrderByDescending(o => o.Answers.Count).FirstOrDefault();

    if (maxAnswers != null) {
        if (maxAnswers.Answers.Count <= 4) {
            width = 500;
            height = 300;
        }
        else {
            width = 600;
            height = 400;
        }
    }

    var showCsvButton = false;
    var settings = WorkContext.CurrentSite.As<QuestionnaireModuleSettingsPart>();
    if (settings != null) {
        showCsvButton = settings.EnableCsvExport;
    }

    var showPdfButton = false;
    var showExcelButton = false;
    var advSettings = WorkContext.CurrentSite.As<QuestionnaireStatsSettingsPart>();
    if (advSettings != null) {
        showPdfButton = advSettings.EnablePdfExport;
        showExcelButton = advSettings.EnableExcelExport;
    }

    var dateFrom = Model.FilterContext.DateFrom.HasValue ? Model.FilterContext.DateFrom.Value.ToString(dateContext.Format) : "";
    var dateTo = Model.FilterContext.DateTo.HasValue ? Model.FilterContext.DateTo.Value.ToString(dateContext.Format) : "";
    var context = Model.FilterContext.Context;
}

@functions{
    public class DateContext {
        public string Format { get; set; }
        public string Separator {
            get {
                if (this.Format.Contains("/"))
                    return "/";
                else if (this.Format.Contains("."))
                    return ".";
                else if (this.Format.Contains("-"))
                    return "-";
                else
                    return "";
            }
        }
    }
}
<p class="breadcrumb">
    <a href="@Url.Action("Index", "QuestionnaireStats", new { area = "Laser.Orchard.Questionnaires" })">@T("Questionnaire Statistics")</a>
    &#62; @Layout.Title
</p>

<div class="row">
    <div class="box box-default">
        <div class="box-header with-border">
            <h3 class="box-title">@T("Filter options") </h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
            @using (Html.BeginForm("Detail", "QuestionnaireStats", FormMethod.Get)) {
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <fieldset class="bulk-actions">
                                <label for="dateFromResults" class="bulk-filter">@T("Date From")</label>
                                <span class="date">
                                    @Html.TextBox("from", Model.FilterContext.DateFrom.HasValue ? Model.FilterContext.DateFrom.Value.ToString(dateContext.Format) : "", new { id = "dateFromResults", @class = "text" })
                                    @Html.HiddenFor(m => m.FilterContext.DateFrom)
                                </span>
                                <label for="dateToResults" class="bulk-filter">@T("Date To")</label>
                                <span class="date">
                                    @Html.TextBox("to", Model.FilterContext.DateTo.HasValue ? Model.FilterContext.DateTo.Value.ToString(dateContext.Format) : "", new { id = "dateToResults", @class = "text" })
                                    @Html.HiddenFor(m => m.FilterContext.DateTo)
                                </span>
                                <label for="dateToResults" class="bulk-filter">@T("Context")</label>
                                <span class="date">
                                    @Html.TextBoxFor(m => m.FilterContext.Context, new { @class = "text" })
                                </span>
                                @Html.Hidden("idQuestionario", Request.QueryString["idQuestionario"])
                            </fieldset>
                            <fieldset class="bulk-items st-btn-fieldset">
                                <button type="submit">@T("Filter")</button>
                                <a href="@Url.Action("Detail", new { idQuestionario = Request.QueryString["idQuestionario"] })" class="button">@T("Clear")</a>
                            </fieldset>
                        </div>
                    </div>
                    <!-- /.col -->
                    <div class="col-md-6">
                        <div class="form-group">
                            <fieldset id="st-export-fieldset" class="bulk-items st-btn-fieldset">
                                @if (showPdfButton) {
                                    <a href="@Url.Action("PdfExport", "QuestionnaireStatsExport", new { area = "Laser.Orchard.Questionnaires", questionnaireId = Model.Id, dateFrom = dateFrom, dateTo = dateTo, dateFormat = dateContext.Format, context = context, redirectUrl = urlBack })" class="button">@T("Export to Pdf")</a>
                                }
                                @if (showExcelButton) {
                                    <a href="@Url.Action("ExcelExport", "QuestionnaireStatsExport", new { area = "Laser.Orchard.Questionnaires", questionnaireId = Model.Id, dateFrom = dateFrom, dateTo = dateTo, dateFormat = dateContext.Format, context = context, redirectUrl = urlBack })" class="button">@T("Export to Excel")</a>
                                }
                                @if (showCsvButton) {
                                    <button type="submit" name="@Html.FieldNameFor(m => m.FilterContext.Export)" value="true">@T("Export to Csv")</button>
                                }
                                <a href="@Url.Action("Index", "FileDownloader", 
                                        new { area = "Laser.Orchard.StartupConfig", UrlBack = urlBack })&FolderName=@Model.Id&ParentFolder=QuestionnairesStatistics" class="button">@T("Show Exported Files")</a>
                            </fieldset>
                        </div>
                        <!-- /.form-group -->
                    </div>
                    <!-- /.col -->
                </div>
                <!-- /.row -->
            }
        </div>
        <!-- /.box-body -->
    </div>
</div>
@Display.QuestionnaireDetail(Model: Model)

@{
    using (Script.Foot()) {
        <script type="text/javascript">
                    $(document).ready(function () {
                @{ <Text>

                $("#dateFromResults,#dateToResults").calendarsPicker({
                    showAnim: "",
                    dateFormat: "@(dateContext.Format.ToLower())",
                    onSelect: function (dates) {
                            // MVC binding needs the dates to be in the global accepted format "yyyy-mm-dd"
                            if (this.id.toLowerCase() == 'datetoresults') {
                            $('#@(Html.FieldIdFor(m=>m.FilterContext.DateTo))').val(dates);
                            }
                            else if (this.id.toLowerCase() == 'datefromresults') {
                            $('#@(Html.FieldIdFor(m=>m.FilterContext.DateFrom))').val(dates);
                            }
                        },
                    renderer: $.extend({}, $.calendarsPicker.themeRollerRenderer, {
                        picker: "<div {popup:start} id='ui-datepicker-div'{popup:end} class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all{inline:start} ui-datepicker-inline{inline:end}'><div class='ui-datepicker-header ui-widget-header ui-helper-clearfix ui-corner-all'>{link:prev}{link:today}{link:next}</div>{months}{popup:start}{popup:end}<div class='ui-helper-clearfix'></div></div>",
                        month: "<div class='ui-datepicker-group'><div class='ui-datepicker-month ui-helper-clearfix'>{monthHeader:dd MM yyyy}</div><table class='ui-datepicker-calendar'><thead>{weekHeader}</thead><tbody>{weeks}</tbody></table></div>"
                    })
                }).on("change", function () {
                        // not getting fired when using button instead of text input
                        let val = $(this).val();
                        var dateFormat = "@(dateContext.Format)";
                        var splitDateFormat = dateFormat.split("@(dateContext.Separator)");
                        var yearPosition = splitDateFormat.indexOf("yyyy");
                        var monthPosition = splitDateFormat.indexOf("MM");
                        var dayPosition = splitDateFormat.indexOf("dd");

                        var splittedDate = val.split("@dateContext.Separator");
                        if (splittedDate.length == 3 && /^\d+$/.test(splittedDate.join(""))) {
                            if (this.id.toLowerCase() == 'datetoresults') {
                                $('#@(Html.FieldIdFor(m=>m.FilterContext.DateTo))').val(splittedDate[yearPosition] + "-" + splittedDate[monthPosition] + "-" + splittedDate[dayPosition]);
                            }
                            else if (this.id.toLowerCase() == 'datefromresults') {
                                $('#@(Html.FieldIdFor(m=>m.FilterContext.DateFrom))').val(splittedDate[yearPosition] + "-" + splittedDate[monthPosition] + "-" + splittedDate[dayPosition]);
                            }
                        } else {
                            if (this.id.toLowerCase() == 'datetoresults') {
                            $('#@(Html.FieldIdFor(m=>m.FilterContext.DateTo))').val("");
                            }
                            else if (this.id.toLowerCase() == 'datefromresults') {
                            $('#@(Html.FieldIdFor(m=>m.FilterContext.DateFrom))').val("");
                            }
                        }
                    });
                </Text>
                }
                
            });
        </script>
    }
}
