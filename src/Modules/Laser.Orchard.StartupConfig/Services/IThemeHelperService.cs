using Orchard;
using Orchard.ContentManagement;
using Orchard.DisplayManagement;
using Orchard.MediaLibrary.Models;
using System.IO;
using System.Web.Mvc;

namespace Laser.Orchard.StartupConfig.Services {
    public interface IThemeHelperService : IDependency {
        /// <summary>
        /// The urlPrefix for the tenant. Saves us from having to recompute it in each shape 
        /// we need it in.
        /// </summary>
        string UrlPrefix { get; }

        /// <summary>
        /// Formats the URL correctly, accounting for tenant prefixes and such.
        /// The urls generated by this method are correct as relative urls to the
        /// application (i.e. they work as internal links within the application)
        /// </summary>
        /// <param name="path">The URL that requires formatting. This should be 
        /// an URL related to the tenant's base url, except "~/"</param>
        /// <returns></returns>
        string ProperUrl(string path);

        /// <summary>
        /// returns the url for the Home page in the current culture
        /// </summary>
        /// <returns></returns>
        string GetLocalizedHomeUrl();

        /// <summary>
        /// Maps the path of a theme asset, "climbing" from the current theme to its
        /// base themes if necessary.
        /// </summary>
        /// <param name="html">An instance of HtmlHelper from the calling view.</param>
        /// <param name="relPath">The asset's path</param>
        /// <returns></returns>
        string ThemeAssetPath(HtmlHelper html, string relPath);

        /// <summary>
        /// Wraps the ResizeMediaUrl of Orchard.MediaProcessing to avoid exceptions when Media isn't a Image (e.g. it's a Vector image, that cannot be resized)
        /// </summary>
        /// <param name="Shape"></param>
        /// <param name="Display"></param>
        /// <param name="Output"></param>
        /// <param name="ContentItem"></param>
        /// <param name="Path"></param>
        /// <param name="Width"></param>
        /// <param name="Height"></param>
        /// <param name="Mode"></param>
        /// <param name="Alignment"></param>
        /// <param name="PadColor"></param>
        /// <param name="Scale"></param>
        [Shape]
        void ResizeMediaUrlWrapper(dynamic Shape, dynamic Display, TextWriter Output, ContentItem ContentItem, string Path, int Width, int Height, string Mode, string Alignment, string PadColor, string Scale = "upscaleOnly");
    }
}
