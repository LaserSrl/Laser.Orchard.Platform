@model Orchard.Core.Common.Models.CommonPart
@using System.Globalization;
@using Orchard.ContentManagement;
@using Orchard;
@using Orchard.Core.Contents;
@using Orchard.Autoroute.Models;
@using Orchard.Widgets.Models;

@{
    Script.Require("Bootstrap").AtHead();
    Style.Require("Bootstrap").AtHead();
    Style.Require("FontAwesome").AtHead();
    Style.Require("LaserBase").AtHead();

    var orchardServices = WorkContext.Resolve<IOrchardServices>();

    var cultureInfo = CultureInfo.GetCultureInfo(WorkContext.CurrentCulture);
    DateTime? createdUtc = Model == null ? null : Model.CreatedUtc;
    DateTime? publishedUtc = Model == null ? null : Model.PublishedUtc;
    DateTime? modifiedUtc = Model == null ? null : Model.ModifiedUtc;

    string createdUtcStr = createdUtc == null ? "" : Convert.ToString(createdUtc);
    DateTime createdLocal = (string.IsNullOrWhiteSpace(createdUtcStr)) ? DateTime.MinValue : Convert.ToDateTime(createdUtcStr, cultureInfo).ToLocalTime();

    string publishedUtcStr = publishedUtc == null ? "" : Convert.ToString(publishedUtc);
    DateTime publishedLocal = (string.IsNullOrWhiteSpace(publishedUtcStr)) ? DateTime.MinValue : Convert.ToDateTime(publishedUtcStr, cultureInfo).ToLocalTime();

    string modifiedUtcStr = modifiedUtc == null ? "" : Convert.ToString(modifiedUtc);
    DateTime modifiedLocal = (string.IsNullOrWhiteSpace(modifiedUtcStr)) ? DateTime.MinValue : Convert.ToDateTime(modifiedUtcStr, cultureInfo).ToLocalTime();

    var contentItem = Model.ContentItem == null ? null : (ContentItem)Model.ContentItem;

    var autoroutePart = contentItem.As<AutoroutePart>();

    IContent container = null;

    // If I have the widgetExPart, I have a Host.
    var widgetExPart = ((dynamic)contentItem).WidgetExPart;
    if (widgetExPart != null) {
        container = widgetExPart.Host;
    }

    // If I am not in a widgetEx, then I have to look for the Container.
    if (container == null) {
        container = Model.Container;
    }

    // If my Container is a Layer, I don't want to link to its edit page.
    var layer = container.As<LayerPart>();
    if (layer != null) {
        container = null;
    }

    // I need to check the user has the permission to edit the container.
    if (container != null && !orchardServices.Authorizer.Authorize(Permissions.EditContent, container)) {
        container = null;
    }
}
@{
    // Defaults
    var statusBackgroundColor = "green";
    var statusIconClass = "fa fa-check";
    var statusText = T("Published");
    var statusDraftText = T("No Draft");
    var statusDraftBackgrundColor = "green";

    //Not Published
    if (!contentItem.HasPublished()) {
        statusBackgroundColor = "red";
        statusIconClass = "fa fa-arrow-down";
        statusText = T("not Published");
    }
    // Does the page have a draft
    if (contentItem.HasDraft()) {
        statusDraftText = T("Has Draft");
        statusDraftBackgrundColor = "yellow";
    }
}
<div class="edit-item-info-box-container">
    <div class="row">
        <!-- /.col -->
        <div class="col-md-12 col-lg-6 col-12 custom-width-info-box">
            <div class="info-box">
                <span class="info-box-icon bg-aqua"><i class="fa fa-cog"></i></span>

                <div class="info-box-content row">
                    @if (createdUtc.HasValue) {
                        <span class="info-box-text col-sm-4">@T("Created on")</span>
                        <span class="info-box-number col-sm-8">@createdLocal.ToString("dddd, dd MMMM yyyy HH:mm:ss", cultureInfo)</span>
                    }
                    @if (publishedUtc.HasValue) {
                        <span class="info-box-text col-sm-4">@T("Published on")</span>
                        <span class="info-box-number col-sm-8">@publishedLocal.ToString("dddd, dd MMMM yyyy HH:mm:ss", cultureInfo)</span>
                    }
                    @if (modifiedUtc.HasValue) {
                        <span class="info-box-text col-sm-4">@T("Modified on")</span>
                        <span class="info-box-number col-sm-8">@modifiedLocal.ToString("dddd, dd MMMM yyyy HH:mm:ss", cultureInfo)</span>
                    }
                    <span class="info-box-text col-sm-4">@T("Last Modified")</span>
                    <span class="info-box-number col-sm-8">@Display.CommonMetadataLastModified(ContentPart: Model)</span>
                </div>
                <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
        </div>
        <!-- /.col -->
        <!-- .col -->
        <div class="col-md-12 col-lg-6 col-12 custom-width-info-box">
            <div class="info-box">
                <span class="info-box-icon bg-@statusBackgroundColor"><i class="@statusIconClass"></i></span>
                <div class="info-box-content row">
                    <span class="info-box-text col-sm-4">@T("Status")</span>
                    <span class="info-box-number col-sm-4"><i class="fa fa-circle fa-lg text-@statusBackgroundColor"></i> @statusText</span>
                    <span class="col-sm-4">
                        @if (autoroutePart != null) {
                            if (contentItem.HasPublished()) {
                                <a href="@Url.ItemDisplayUrl(contentItem)"
                                   class="btn btn-success btn-sm text-white width-80"
                                   target="_blank"
                                   title="@T("View")">
                                    <span class="glyphicon glyphicon-new-window"></span>
                                    @T("View").Text
                                </a>
                                @*@Html.ItemDisplayLink(T("View").Text, contentItem, new { @class = "btn btn-success btn-sm text-white" })*@
                            }
                        }
                    </span>
                    <br />
                    <span class="info-box-text col-sm-4">@T("Draft")</span>
                    <span class="info-box-number col-sm-4"><i class="fa fa-circle fa-lg text-@statusDraftBackgrundColor"></i> @statusDraftText</span>
                    @{
                        var publishLaterPart = ((dynamic)Model.ContentItem).PublishLaterPart;
                        if (publishLaterPart != null) {
                            DateTime? versionPublishedUtc = publishLaterPart.VersionPublishedUtc == null ? null : publishLaterPart.VersionPublishedUtc;
                            if (publishLaterPart != null && contentItem != null) {
                                if ((((DateTime?)publishLaterPart.ScheduledPublishUtc.Value).HasValue &&
                                        ((DateTime?)publishLaterPart.ScheduledPublishUtc.Value) > DateTime.UtcNow) || (contentItem.HasPublished() && versionPublishedUtc.HasValue)) {
                                    if (!contentItem.HasPublished() && !versionPublishedUtc.HasValue) {
                                        <span class="info-box-text col-sm-4">@T("Publish on")</span>
                                        <span class="info-box-number col-sm-8"><i class="fa fa-calendar-check-o fa-lg text-green"></i> @Display.DateTime(DateTimeUtc: ((Orchard.ContentManagement.Utilities.LazyField<System.DateTime?>)publishLaterPart.ScheduledPublishUtc).Value, CustomFormat: null)</span>
                                    }
                                }
                            }
                        }
                    }
                    @{
                        var archiveLaterPart = ((dynamic)Model.ContentItem).ArchiveLaterPart;
                        if (archiveLaterPart != null) {
                            var scheduledArchiveUtc = archiveLaterPart.ScheduledArchiveUtc.Value;
                            var isPublished = (archiveLaterPart.ContentItem.VersionRecord != null && archiveLaterPart.ContentItem.VersionRecord.Published);
                            if ((isPublished && scheduledArchiveUtc != null && scheduledArchiveUtc > DateTime.UtcNow)) {
                                <span class="info-box-text col-sm-4">@T("Unpublish on")</span>
                                <span class="info-box-number col-sm-4">
                                    <i class="fa fa-calendar-times-o fa-lg text-red" aria-hidden="true"></i> @Display.DateTime(DateTimeUtc: (DateTime)scheduledArchiveUtc, CustomFormat: null)
                                </span>
                            }
                        }
                    }
                    <span class="col-sm-4">
                        @if (autoroutePart != null) {
                            if (contentItem.HasPublished()) {
                                if (contentItem.HasDraft()) {
                                    if (Authorizer.Authorize(Permissions.PreviewContent, contentItem)) {
                                        <a href="@Url.Action("Display", "Item",  new { area = "Contents", id = contentItem.Id, version = contentItem.Version })"
                                           class="btn btn-warning btn-sm text-white width-80"
                                           target="_blank"
                                           title="@T("Preview")">
                                            <span class="glyphicon glyphicon-new-window"></span>
                                            @T("Preview").Text
                                        </a>
                                    }
                                }
                            }
                            else {
                                if (contentItem.HasDraft()) {
                                    if (Authorizer.Authorize(Permissions.PreviewContent, contentItem)) {
                                        <a href="@Url.Action("Display", "Item",  new { area = "Contents", id = contentItem.Id, version = contentItem.Version })"
                                           class="btn btn-warning btn-sm text-white width-80"
                                           target="_blank"
                                           title="@T("Preview")">
                                            <span class="glyphicon glyphicon-new-window"></span>
                                            @T("Preview").Text
                                        </a>
                                    }
                                }
                            }
                        }
                    </span>
                    @if (container != null) {
                        <br />
                        <span class="info-box-text col-sm-4">@T("This content is an element inside a container.")</span>
                        <span class="info-box-text col-sm-4"><a href="@Url.ItemEditUrl(container)">@T("Edit container")</a></span>
                        <span class="col-sm-4"></span>
                    }
                </div>
                <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
        </div>
        <!-- /.col -->
    </div>
</div>