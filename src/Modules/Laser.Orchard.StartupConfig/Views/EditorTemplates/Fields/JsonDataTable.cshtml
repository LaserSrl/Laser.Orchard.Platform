@using Laser.Orchard.StartupConfig.Models;
@using Laser.Orchard.StartupConfig.ViewModels;

@model JsonDataTableFieldViewModel
@{
    Style.Require("tabulator").AtHead();
    Script.Require("tabulator").AtHead();
    Script.Require("luxon").AtHead();


    var settings = Model.Field.PartFieldDefinition.Settings.GetModel<JsonDataTableFieldSettings>();
    //var columns = settings.ColumnsDefinition;
    var columns = Model.ColumnsDefinition;
    var uniqueId = Model.Field.PartFieldDefinition.Name + "-" + Model.Field.Name;

    // If column is set up to display the label, add a proper formatter function that checks inside the values in the list to display the label instead of the value for selected items.
    columns = columns.Replace("\"displayLabel\":\"label\"", "formatter:function(cell){var l = ''; cell.getColumn().getDefinition().editorParams.values.forEach(function(a){if (a.value.toString() == cell.getValue()) {l = a.label;} });return l;}");

    columns = "[{rowHandle:true,formatter:\"handle\",headerSort:false,width:30,minWidth:30}," + columns.TrimStart('[').TrimEnd(']') + ",{rowHandle:true,formatter:\"buttonCross\",headerSort:false,width:30,minWidth:30,cellClick:function(e, cell){cell.getRow().delete();}}]";

}
<fieldset>
    <legend>@Model.Field.DisplayName</legend>
    <div>
        @Html.HiddenFor(m => m.Field.TableData)
        <div class="btn-group" role="group" aria-label="Basic example" id="toolbar-@uniqueId">
            <button type="button" class="btn btn-secondary" id="btnAddTop-@uniqueId" style="margin-right:10px" title="@T("Insert a row at the top of the list")">@T("Insert")</button>
            <button type="button" class="btn btn-secondary" id="btnAddBottom-@uniqueId" style="margin-right:10px" title="@T("Insert a row at the bottom of the list")">@T("Add")</button>
        </div>
        <div id="table-@uniqueId"></div>
        @using (Script.Foot()) {
            <script>
            $(function () {
                var tableId = "#table-@uniqueId";
                var $hidden = $("#@Html.FieldIdFor(m => m.Field.TableData)");

                var $table = new Tabulator(tableId, {
                    height:"300px",
                    layout:"fitColumns",
                    movableRows: true,
                    columns: @Html.Raw(columns),
                    data: @Html.Raw(Model.Field.TableData)
                });
                $table.on("dataChanged", function (data) {
                    var newVal = JSON.stringify(data);
                    $hidden.val(newVal);
                });
                $table.on("rowMoved", function (row) {
                    var newData = row.getTable().getData();
                    var rows = row.getTable().getRows();
                    for (var i = 0; i < rows.length; i++) {
                        newData[i] = rows[i].getData();
                    }
                    var newVal = JSON.stringify(newData);
                    $hidden.val(newVal);
                });
                $("#btnAddTop-@uniqueId").click(function(){
                    var rows = $table.getRows();
                    if(@(settings.MaxRows) > 0 && rows.length >= @(settings.MaxRows)) {
                        alert("@T("Max number of rows reached.")");
                    }
                    else {
                        $table.addRow({}, true);
                    }
                });
                $("#btnAddBottom-@uniqueId").click(function(){
                    var rows = $table.getRows();
                    if(@(settings.MaxRows) > 0 && rows.length >= @(settings.MaxRows)) {
                        alert("@T("Max number of rows reached.")");
                    }
                    else {
                        $table.addRow({}, false);
                    }
                });
            });
            </script>
        }
    </div>
    @if (HasText(settings.Hint)) {
        <span class="hint">@settings.Hint</span>
    }
</fieldset>
